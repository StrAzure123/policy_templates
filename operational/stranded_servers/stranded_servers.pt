name "Stranded Servers"
rs_pt_ver 20180301
type "policy"
short_description "Report and remediate any Servers that are stranded in booting. \n See the [README](https://github.com/rightscale/policy_templates/tree/master/operational/stranded_servers) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description ""
category "Operational"
severity "low"
info(
  version: "1.2",
  provider: "Flexera Cloud Management",
  service: "",
  policy_set: ""
)

###############################################################################
# Permissions
###############################################################################

permission "perm_instances" do
  label "Permissions for instances"
  actions "rs_cm.index", "rs_cm.show"
  resources "rs_cm.instances", "rs_cm.clouds"
end

###############################################################################
# User inputs
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

parameter "param_exclude_tags" do
  type "list"
  label "Tags to ignore"
  description "List of tags that will exclude Servers from being evaluated by this policy. Multiple tags are evaluated as an 'OR' condition. Tag must be of the format 'namespace:predicate=value'. Example: 'rs_agent:type=right_link_lite,rs_monitoring:state=auth'"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_rs", type: "rightscale"

###############################################################################
# Datasources
###############################################################################

datasource "ds_list_stranded_instances" do
  request do
    run_script $js_list_stranded_instances, rs_cm_host, rs_project_id, $param_exclude_tags
  end
  result do
    encoding "json"
    collect jmes_path(response, "[*]") do
      field "cloud_name", jmes_path(col_item, "links.cloud.name")
      field "cloud_type", jmes_path(col_item, "links.cloud.cloud_type")
      field "name", jmes_path(col_item, "name")
      field "resource_uid", jmes_path(col_item, "resource_uid")
      field "updated_at", jmes_path(col_item, "links.deployment.timestamps.updated_at")
      field "locked", jmes_path(col_item, "locked")
      field "href", jmes_path(col_item, "href")
      field "tags", jmes_path(col_item, "tags")
      field "state", jmes_path(col_item, "state")
    end
  end
end

datasource "ds_dimensions" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/",rs_org_id,"/costs/dimensions"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
  end
end

datasource "ds_billing_centers" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/billing_centers"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "view", "allocation_table"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "href", jmes_path(col_item,"href")
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "parent_id", jmes_path(col_item,"parent_id")
      field "ancestor_ids", jmes_path(col_item,"ancestor_ids")
      field "allocation_table", jmes_path(col_item,"allocation_table")
    end
  end
end

datasource "ds_cloud_vendor_accounts" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/analytics/orgs/",rs_org_id,"/cloud_vendor_accounts"])
    header "Api-Version", "1.0"
    header "User-Agent", "RS Policies"
    query "cloud_vendor", "aws"
  end
  result do
    encoding "json"
    collect jmes_path(response,"[*]") do
      field "id", jmes_path(col_item,"id")
      field "name", jmes_path(col_item,"name")
      field "vendor_name", jmes_path(col_item,"vendor_name")
    end
  end
end

datasource "ds_new_bc_costs" do
  request do
    run_script $js_new_costs_request, rs_org_id, $ds_billing_centers
  end
  result do
    encoding "json"
    collect jmes_path(response,"rows[*]") do
      field "vendor", jmes_path(col_item, "dimensions.vendor")
      field "vendor_account", jmes_path(col_item,"dimensions.vendor_account")
      field "vendor_account_name", jmes_path(col_item,"dimensions.vendor_account_name")
      field "cost_amortized_unblended_adj", jmes_path(col_item,"metrics.cost_amortized_unblended_adj")
      field "usage_amount", jmes_path(col_item, "metrics.usage_amount")
      field "region", jmes_path(col_item, "dimensions.region")
      field "instance_type", jmes_path(col_item, "dimensions.instance_type")
      field "service", jmes_path(col_item, "dimensions.service")
      field "resource_type", jmes_path(col_item, "dimensions.resource_type")
      field "id", jmes_path(col_item,"dimensions.billing_center_id")
      field "resource_id", jmes_path(col_item, "dimensions.resource_id")
      field "timestamp", jmes_path(col_item,"timestamp")
    end
  end
end

script "js_new_costs_request", type: "javascript" do
  parameters "org_id","ds_billing_centers"
  result "request"
  code <<-EOS  
    var date = new Date();
    var year = date.getUTCFullYear();
	var month =  (date.getUTCMonth()==11)?1:2 + date.getUTCMonth();
    if (month == 1){
      var lmonth = 12;
      var lyear = year ;
	  year=year+1;
    } else {
      var lmonth = month-1;
      var lyear = year ;
    }
    mo = month.toString().length > 1 ? month : '0' + month;
    lmo = lmonth.toString().length > 1 ? lmonth : '0' + lmonth;
    var next_month = year + "-" + mo
    var current_month = lyear + "-" + lmo
    var billing_center_ids = []
    var top_billing_centers = _.reject(ds_billing_centers, function(bc){ return bc.parent_id != null });
    billing_center_ids = _.map(top_billing_centers, function(value, key){ return value.id });

    var dimensions = ["billing_center_id","vendor","vendor_account","vendor_account_name", "category","instance_type","region","resource_type","service","usage_type","usage_unit","resource_id"]
    var expression = [
      {"type" : "and", "expressions" : [
        {"dimension":"category","type":"equal","value":"Compute"},
        {"dimension":"vendor","type":"equal","value":"Azure"},
        {"dimension":"service", "type":"equal", value:"Microsoft.Compute"},
        {"dimension":"resource_type","type":"substring","substring":"Virtual Machines"}
      ]},
      {"type" : "and", "expressions" : [
        {"dimension":"category","type":"equal","value":"Compute"},
        {"dimension":"vendor","type":"equal","value":"AzureCSP"},
        {"dimension":"service", "type":"equal", value:"Microsoft.Compute"},
        {"dimension":"resource_type","type":"substring","substring":"Virtual Machines"}
      ]},
      {"type" : "and", "expressions" : [
        {"dimension":"category","type":"equal","value":"Compute"},
        {"dimension":"resource_type","type":"equal","value":"Compute Instance"},
        {"dimension":"vendor","type":"equal","value":"AWS"}
      ]}
    ]
    var request = {
      auth: "auth_rs",
      host: "optima.rightscale.com",
      verb: "POST",
      path: "/bill-analysis/orgs/" + org_id + "/costs/select",
      body_fields: {
        "billing_center_ids": billing_center_ids,
        "dimensions": dimensions,
        "metrics": ["usage_amount", "cost_amortized_unblended_adj"],
        "granularity": "month",
        "start_at": current_month,
        "end_at": next_month,
        "limit": 100000,
        "filter": {
          "type":"or",
          "expressions": expression
        }
      },
      headers: {
        "Api-Version": "1.0",
        "User-Agent": "RS Policies",
      }
    }
EOS
end

datasource "ds_format_costs" do
  run_script $js_format_costs, $ds_new_bc_costs, $ds_cloud_vendor_accounts, $ds_billing_centers
end

script "js_format_costs", type: "javascript" do
  parameters "new_bc_costs", "ds_cloud_vendor_accounts", "ds_billing_centers"
  result "formatted_data"
  code <<-EOS
  //https://www.w3resource.com/javascript-exercises/javascript-date-exercise-3.php
  var getDaysInMonth = function(month,year) {
    // Here January is 1 based
    //Day 0 is the last day in the previous month
    return new Date(year, month, 0).getDate();
  // Here January is 0 based
  // return new Date(year, month+1, 0).getDate();
  };
  var date = new Date()
  var today = date.getDate()
  var numdays = getDaysInMonth(date.getUTCMonth(),date.getUTCFullYear())
  var monthcomplete = today / numdays ;
  var formatted_data = [];
  var unsorted_results = [];
  var arr_results = [];
  var bcs = [];
  _.each(new_bc_costs, function(bcc){bcs.push(bcc.id)})
  bcs = _.uniq(bcs) ;
  _.each(bcs, function(bc_id){
    var new_bc_cost_objs = _.reject(new_bc_costs, function(new_bc_cost){ return new_bc_cost.id != bc_id || new_bc_cost.usage_amount == null});
    _.each(new_bc_cost_objs, function(new_bc_cost_obj){
      var billing_center = _.reject(ds_billing_centers, function(bc){ return bc.id != new_bc_cost_obj.id })[0];
      if (new_bc_cost_obj.vendor == "AWS" ) {
        var account = _.reject(ds_cloud_vendor_accounts, function(ds_cloud_vendor_account){ return ds_cloud_vendor_account.id != new_bc_cost_obj.vendor_account_name });
        var vendor_account_name = account[0].name
      } else {
        var vendor_account_name = new_bc_cost_obj.vendor_account_name
      }
      cost = new_bc_cost_obj.cost_amortized_unblended_adj
      run_rate = cost / monthcomplete
      if (new_bc_cost_obj.cost_amortized_unblended_adj != 0){
        arr_results.push({
          name: billing_center.name,
          id: bc_id,
          new_sum: new_bc_cost_obj.cost_amortized_unblended_adj,
          service: new_bc_cost_obj.service,
          vendor: new_bc_cost_obj.vendor,
          vendor_account_name: vendor_account_name,
          usage_amount: new_bc_cost_obj.usage_amount,
          region: new_bc_cost_obj.region,
          instance_type: new_bc_cost_obj.instance_type,
          resource_id: new_bc_cost_obj.resource_id,
          resource_type: new_bc_cost_obj.resource_type,
          timestamp: new_bc_cost_obj.timestamp,
          run_rate: parseFloat(run_rate).toFixed(2),
          run_rate_for_calc: run_rate
        })
      }
    })
  })
  var total =  parseFloat(_.reduce(_.pluck(arr_results, "run_rate_for_calc"), function(memo, num){ return memo + num; }, 0)).toFixed(2);
  _.each(arr_results, function(result){
    result["total"] = total
    formatted_data.push(result)
  })
EOS
end

datasource "ds_get_stranded_instances" do
  run_script $js_get_stranded_instance, $ds_list_stranded_instances, $param_exclude_tags, $ds_format_costs
end

###############################################################################
# Script
###############################################################################

script "js_list_stranded_instances", type: "javascript" do
  result "request"
  parameters "rs_cm_host","rs_project_id","param_exclude_tags"
  code <<-EOS
    var filtered_tags = ""
    if ( param_exclude_tags.length > 0 && param_exclude_tags[0] !== ""){
      var filtered_tags = "&tag!=" + param_exclude_tags.join(",");
    }

    request = {
      "auth": "auth_rs",
      "verb": "GET",
      "host": rs_cm_host,
      "path": "/api/instances",
      "headers": {
        "X-Api-Version": "1.6",
        "X-Account": \""+rs_project_id+\""
      },
      "query_params": {
        "view": "full",
        "filter": "state=stranded in booting,stranded" + filtered_tags
      }
    }

  EOS
end

script "js_get_stranded_instance", type: "javascript" do
  parameters "ds_list_stranded_instances","param_exclude_tags", "ds_format_costs"
  result "content"
  code <<-EOS
    var content=[]

    for(var i=0;i<ds_list_stranded_instances.length;i++){
      instance=ds_list_stranded_instances[i]
	  
	  // Constructing tags with comma separated to display in detail_template
      var tags = instance['tags']
      var dis_tags=""
      for(var j=0;j<tags.length;j++){
        var tag=tags[j];
        dis_tags=dis_tags+", "+tag;
      }

      var locked = instance['locked'];
      if(locked === true){
        locked = 'Yes';
      }else{
        locked = 'No';
      }

      var date=(instance['updated_at'].toString()).slice(0,10)
      content.push({
        cloud_name:instance['cloud_name']
        cloud_type:instance['cloud_type']
        name:instance['name']
        resource_uid:instance['resource_uid']
        updated_at:date
        locked:locked
        href:instance['href']
        tags:(dis_tags.slice(2))
      })
    }
  EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_stranded_instances" do
  validate $ds_get_stranded_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Stranded Instance Details"
    detail_template <<-EOS
# Stranded Instance Details
| Cloud Name | Cloud Type | Instance Name | Resource UID | Updated On | Is Instance Locked | Href | Tags |
| ---------- | ---------- | ------------- | ------------ | ---------- | ------------------ | ---- | ---- |
{{ range data -}}
| {{.cloud_name}} | {{.cloud_type}} | {{.name}} | {{.resource_uid}} | {{.updated_at}} | {{.locked}} | {{.href}} | {{.tags}} |
{{ end -}}
    EOS
    escalate $report_stranded_instances
    escalate $approve_terminate_instances
    check eq(size(data),0)
  end
end

###############################################################################
# Escalations
###############################################################################

escalation "report_stranded_instances" do
  email $param_email
end

escalation "approve_terminate_instances" do
  request_approval  do
  label "Approve Instance Termination"
    description "Approve escalation to run RightScale Cloud Workflow to delete Stranded Instnace"
    parameter "approval_reason" do
      type "string"
      label "Reason for Approval"
      description "[Note]: Locked instances will not be terminated."
    end
  end
  run "terminate_instance", data
end

###############################################################################
# Cloud Workflow
###############################################################################

define terminate_instance($data) do
  foreach $item in $data do
    sub on_error: skip do
      @instance=rs_cm.get(href:$item["href"])
      @instance.terminate()
    end
  end
end
